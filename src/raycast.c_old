//Color

	// r->tex_x = (int)(r->wall_x * TEXTURE_SIZE);
	// if ((r->side == 0 && r->ray_dirx < 0) || (r->side == 1 && r->ray_diry > 0))
	// 	r->tex_x = TEXTURE_SIZE - r->tex_x - 1;
	// r->step = 1.0 * TEXTURE_SIZE / r->line_height;
	// r->pos = (r->draw_start - HEIGHT / 2 + r->line_height / 2) * r->step;

	// // 		printf("X: %d\n",x);
	// //   printf("DrawStart: %d   DrawEnd: %d\n",r->draw_start, r->draw_end);
	// while (r->draw_start < r->draw_end)
	// {

	// 	r->pos += r->step;
	// 	if (r->dir == NORTH || r->dir == SOUTH)				// add some shading to the north and south walls
	// 		r->color = 0x7F7F7F;
	// 	// ft_printf("Update: r->color %d\n", r->color);
	// 	if (r->color > 0)				// your pixel map (int** in this case)
	// 		mlx_put_pixel(game->img, x, r->draw_start, r->color);
	// 		// r->pixel_map[r->draw_start][x] = r->color;
	// 	r->draw_start++;
	// }



void update_pixelmap(t_game *game, int x)
{
	t_raycast	*r;
	int			y;

	r = &game->r;
	r->dir = ft_get_direction(r);
    //x coordinate on the texture
    // if(side == 0 && rayDirX > 0) texX = texWidth — texX — 1; //touches x axis (south)
    // if(side == 1 && rayDirY < 0) texX = texWidth — texX — 1; //touches y axis (west)
	r->tex_x = (int)(r->wall_x * texWidth);
	if ((r->side == 0 && r->ray_dirx < 0) || (r->side == 1 && r->ray_diry > 0))
		r->tex_x = texWidth - r->tex_x - 1;
	// How much to increase the texture coordinate per screen pixel
	r->step = 1.0 * texHeight / r->line_height;
	// Starting texture coordinate pos = texpos
	r->pos = (r->draw_start - HEIGHT / 2 + r->line_height / 2) * r->step;
	y = r->draw_start;
	while (y < r->draw_end)
	{
		// Cast the texture coordinate to integer, and mask with (texHeight — 1) in case of overflow
		r->tex_y= (int)r->pos & (texHeight - 1);
		r->pos += r->step;
		// r->color = get_color(game,r);
		r->color = game->no_texture->pixels[texHeight * r->tex_y + r->tex_x];

		if(r->side == 1)
			r->color = (r->color >> 1) & 8355711;
		if (r->color > 0)				// your pixel map (int** in this case)
			mlx_put_pixel(game->img, x, y, r->color);
			// r->pixel_map[r->draw_start][x] = r->color;
		// r->draw_start++;
		y++;
	}
}